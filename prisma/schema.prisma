generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  agentId                String        @id @default(uuid())
  firstName              String
  middleName             String?
  lastName               String
  email                  String        @unique
  password               String
  phone                  String?
  status                 Boolean       @default(true)
  image                  String?
  country                String
  postalAddress          String
  physicalAddress        String
  businessName           String
  businessDocument       String
  businessDocumentNumber String
  businessDocumentType   String
  nationalId             String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  Student                Student[]
  Transaction            Transaction[]
}

model Student {
  studentId         String        @id @default(uuid())
  firstName         String
  middleName        String?
  lastName          String
  email             String        @unique
  password          String
  phone             String?
  status            Boolean       @default(true)
  image             String?
  passportNumber    String?
  passportFrontSide String?
  passportBackSide  String?
  loanDoc           String?
  admissionDoc      String?
  dob               DateTime?
  gender            String?
  address           String?
  city              String?
  state             String?
  country           String?
  pincode           String?
  agentId           String?
  emailverified     Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Agent             Agent?        @relation(fields: [agentId], references: [agentId])
  Transaction       Transaction[]
}

model Currency {
  currencyId  String        @id @default(uuid())
  name        String?
  code        String
  forexRate   Float
  country     String?
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model Fee {
  feeId     String   @id @default(uuid())
  name      String
  info      String?
  amount    Float
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  transactionId       String            @id @default(uuid())
  studentId           String
  agentId             String?
  currencyId          String
  amount              Float
  forexRate           Float
  status              TransactionStatus @default(Incomplete)
  RRN                 String?
  challan             String?
  a2Form              String?
  swiftCopy           String?
  remitType           String?
  program             String?
  yearOfCompletion    String?
  paymentType         String?
  university          String?
  universitystudentId String?
  universityAddress   String?
  universityCity      String?
  universityCountry   String?
  document1           String?
  document2           String?
  additionalDocument  String?
  accountInfo         String?
  bankName            String?
  bankAccountNumber   String?
  bankCode            String?
  bankCodeType        String?
  bankSwiftCode       String?
  bankIBAN            String?
  bankAddress         String?
  bankCountry         String?
  remarks             String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Student             Student           @relation(fields: [studentId], references: [studentId])
  Agent               Agent?            @relation(fields: [agentId], references: [agentId])
  Currency            Currency          @relation(fields: [currencyId], references: [currencyId])
}

enum TransactionStatus {
  Incomplete
  Initiated
  Successful
  Cancelled
  Failed
}
